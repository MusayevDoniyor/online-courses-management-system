name: CI/CD Pipeline

on:
  push:
    branches: [main, dev, feature/*]
  pull_request:
    branches: [main]

env:
  SSH_USER: ubuntu
  SSH_HOST: 129.150.45.33
  PROJECT_DIR: /home/ubuntu/online-courses

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 2009
          POSTGRES_DB: online_courses_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Run lint
        run: npm run lint

      - name: Run tests
        run: npm run test

      - name: Add SSH key
        if: github.ref == 'refs/heads/main'
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.PRIVATE_KEY }}

      - name: Copy files via rsync
        if: github.ref == 'refs/heads/main'
        run: |
          rsync -avz --delete \
            --exclude='.git' \
            --exclude='node_modules' \
            -e "ssh -o StrictHostKeyChecking=no" \
            ./ ${{ env.SSH_USER }}@${{ env.SSH_HOST }}:${{ env.PROJECT_DIR }}

      - name: Deploy application
        if: github.ref == 'refs/heads/main'
        run: |
          ssh -o StrictHostKeyChecking=no ${{ env.SSH_USER }}@${{ env.SSH_HOST }} << 'EOF'
          cd $PROJECT_DIR

          # Ensure Docker is running
          sudo systemctl start docker || true

          # Stop and remove old containers
          docker-compose down || true

          # Pull fresh images and rebuild
          docker-compose pull || true
          docker-compose up -d --build

          # Run database migrations
          docker-compose exec backend npm run migration:run

          # Clean up old images
          docker image prune -f
          EOF
